CLARITY Pulse V2 - iOS Health Tracking App
==========================================

Project Overview
----------------
CLARITY Pulse V2 is a complete rebuild of a HIPAA-compliant iOS health tracking application. This is a SwiftUI + SwiftData application that serves as a frontend wrapper for a comprehensive backend API with 44 endpoints. The app must be built using strict Test-Driven Development (TDD) methodology with 100% test coverage for business logic.

Technical Requirements
---------------------
1. iOS 17+ deployment target
2. SwiftUI for UI (no UIKit except where necessary)
3. SwiftData for local persistence
4. @Observable ViewModels (iOS 17+ pattern)
5. Async/await for all asynchronous operations
6. Protocol-first architecture for testability
7. Clean Architecture layers (UI → Domain → Data → Infrastructure)
8. Dependency injection via Environment
9. Private by default access control (this is an app, not a framework)

Backend Integration Requirements
-------------------------------
The app must integrate with 44 backend endpoints organized as follows:

Authentication (7 endpoints):
- POST /api/v1/auth/register - User registration
- POST /api/v1/auth/login - User login
- POST /api/v1/auth/logout - User logout
- POST /api/v1/auth/refresh - Token refresh
- POST /api/v1/auth/verify - Email verification
- POST /api/v1/auth/reset-password - Password reset
- GET /api/v1/auth/profile - User profile

Health Data (5 endpoints):
- POST /api/v1/health-data - Upload health metrics
- GET /api/v1/health-data/ - List health data with pagination
- GET /api/v1/health-data/{processing_id} - Get processing details
- DELETE /api/v1/health-data/{processing_id} - Delete processing job
- GET /api/v1/health-data/processing/{id}/status - Get processing status

HealthKit Integration (4 endpoints):
- POST /api/v1/healthkit - Upload HealthKit data
- GET /api/v1/healthkit/status/{upload_id} - Get upload status
- POST /api/v1/healthkit/sync - Trigger sync
- GET /api/v1/healthkit/categories - Get available categories

AI Insights (6 endpoints):
- POST /api/v1/insights - Generate insights
- POST /api/v1/insights/chat - AI chat interface
- GET /api/v1/insights/summary - Get daily/weekly summaries
- GET /api/v1/insights/recommendations - Get health recommendations
- GET /api/v1/insights/trends - Get trend analysis
- GET /api/v1/insights/alerts - Get health alerts

PAT Analysis (5 endpoints):
- POST /api/v1/pat/analysis - Start PAT analysis
- GET /api/v1/pat/status/{analysis_id} - Get analysis status
- GET /api/v1/pat/results/{analysis_id} - Get analysis results
- POST /api/v1/pat/batch - Batch analysis
- GET /api/v1/pat/models - Get available models

Metrics & Monitoring (4 endpoints):
- GET /api/v1/metrics/health - System health
- GET /api/v1/metrics/user/{user_id} - User metrics
- POST /api/v1/metrics/export - Export data
- GET /metrics - Prometheus metrics (skip)

WebSocket (3 endpoints):
- WS /api/v1/ws - Main WebSocket connection
- GET /api/v1/ws/health - WebSocket health
- GET /api/v1/ws/rooms - Available rooms

System (5 endpoints):
- GET /health - Health check
- GET /docs - Swagger docs (skip)
- GET /redoc - ReDoc (skip)
- GET /openapi.json - OpenAPI spec (skip)
- GET / - Root info

HIPAA Compliance Requirements
----------------------------
1. All PHI must be encrypted at rest using iOS Keychain and CryptoKit
2. All network transmission must use TLS 1.3
3. Biometric authentication required for sensitive operations
4. Comprehensive audit logging for all data access
5. Automatic session timeout after 15 minutes of inactivity
6. No PHI in logs or error messages
7. Certificate pinning for production
8. Jailbreak detection
9. Screenshot prevention for sensitive screens
10. Secure data deletion when required

Security Features
----------------
1. Keychain storage for tokens and encryption keys
2. SwiftData encryption for local health data
3. Biometric authentication (Face ID/Touch ID)
4. Session management with automatic timeout
5. Audit trail for all PHI access
6. Network security with certificate pinning
7. Input validation and sanitization
8. Anti-debugging and jailbreak detection
9. Secure WebSocket connections
10. Encrypted offline data storage

Core Features
------------
1. User Authentication
   - Registration with email verification
   - Secure login with biometric option
   - Password reset flow
   - Token refresh handling
   - Session management

2. Health Data Management
   - Manual health metric entry
   - HealthKit integration and sync
   - Offline data storage with sync queue
   - Data visualization (charts/graphs)
   - Export functionality

3. AI-Powered Insights
   - Daily/weekly/monthly summaries
   - Personalized recommendations
   - Trend analysis
   - Health alerts
   - Interactive AI chat

4. PAT Sleep Analysis
   - Automated sleep stage analysis
   - Circadian rhythm tracking
   - Sleep quality scoring
   - Anomaly detection
   - Historical comparisons

5. Real-time Features
   - WebSocket connection for live updates
   - Push notifications
   - Background sync
   - Offline queue management
   - Conflict resolution

UI/UX Requirements
-----------------
1. Main tab bar with: Dashboard, Health, Insights, Chat, Settings
2. Onboarding flow for new users
3. Dashboard with key metrics and quick actions
4. Health data entry and visualization screens
5. Insights list and detail views
6. AI chat interface
7. Settings for profile, preferences, security
8. Consistent design system with reusable components
9. Dark mode support
10. Accessibility compliance (VoiceOver, Dynamic Type)

Data Models
----------
1. User - Profile and authentication data
2. HealthMetric - Individual health measurements
3. Insight - AI-generated insights and recommendations
4. PATAnalysis - Sleep analysis results
5. SyncQueueItem - Offline sync queue management
6. AuditLog - HIPAA compliance audit trail

Testing Requirements
-------------------
1. Unit tests for all ViewModels, Services, and Repositories
2. Integration tests for API endpoints
3. UI tests for critical user flows
4. Security tests for encryption and authentication
5. Performance tests for data operations
6. Offline functionality tests
7. WebSocket connection tests
8. Mock implementations for all protocols
9. 100% code coverage for business logic
10. TDD approach - no production code without failing test first

Performance Requirements
-----------------------
1. App launch < 2 seconds
2. Screen transitions < 300ms
3. API response handling < 1 second
4. Smooth 60fps scrolling
5. Efficient memory usage (< 100MB baseline)
6. Background sync without UI impact
7. Batch operations for large datasets
8. Image and data caching
9. Lazy loading for lists
10. Optimized SwiftData queries

Architecture Patterns
--------------------
1. Clean Architecture with clear layer separation
2. Repository pattern for data access
3. Use Case pattern for business logic
4. MVVM with @Observable ViewModels
5. Coordinator pattern for navigation
6. Factory pattern for dependency creation
7. Strategy pattern for conflict resolution
8. Observer pattern for real-time updates
9. Adapter pattern for third-party integrations
10. Facade pattern for complex subsystems

Third-Party Dependencies
-----------------------
1. AWS Amplify - Authentication and backend integration
2. HealthKit - Apple health data integration
3. CryptoKit - Encryption services
4. Network framework - WebSocket support
5. BackgroundTasks - Background processing
6. UserNotifications - Push notifications
7. LocalAuthentication - Biometric auth
8. OSLog - Structured logging
9. Swift Charts - Data visualization
10. No other external dependencies allowed

Development Process
------------------
1. TDD mandatory - Red, Green, Refactor cycle
2. BDD for acceptance criteria
3. Git flow with feature branches
4. Code review required for all PRs
5. Automated CI/CD pipeline
6. SwiftLint for code style
7. Documentation for public APIs
8. Regular security audits
9. Performance profiling
10. Accessibility testing

Success Criteria
---------------
1. All 44 backend endpoints properly integrated
2. 100% test coverage for business logic
3. HIPAA compliance verified
4. All security requirements implemented
5. Offline functionality working seamlessly
6. Real-time updates via WebSocket
7. Smooth user experience with no crashes
8. App Store approval ready
9. Performance targets met
10. Accessibility compliance achieved

Project Timeline
---------------
Phase 1 (Week 1): Foundation & Infrastructure
- Project setup and configuration
- Core protocols and dependency injection
- Networking layer with all DTOs
- Basic authentication flow

Phase 2 (Week 2): Backend Integration
- All 44 endpoint implementations
- Offline sync architecture
- WebSocket connection
- Error handling

Phase 3 (Week 3): Core Features
- Health data management
- HealthKit integration
- AI insights display
- PAT analysis

Phase 4 (Week 4): Polish & Security
- HIPAA compliance implementation
- Security hardening
- Performance optimization
- UI polish and accessibility

This is a greenfield project requiring a complete implementation from scratch. The previous V1 implementation should be completely replaced with proper TDD methodology.