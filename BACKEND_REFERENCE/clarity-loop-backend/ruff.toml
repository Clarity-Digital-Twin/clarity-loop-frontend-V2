# Ruff Configuration for Clarity Loop Backend
# Python 3.11+ compatible linting and formatting rules

# Target Python 3.11+
target-version = "py311"

# Line length to match black
line-length = 88

# Enable preview features for latest rules
preview = true

[lint]
# Enable specific linting rules
select = [
    "E",    # pycodestyle errors
    "W",    # pycodestyle warnings
    "F",    # pyflakes
    "I",    # isort
    "N",    # pep8-naming
    "D",    # pydocstyle
    "UP",   # pyupgrade
    "YTT",  # flake8-2020
    "ANN",  # flake8-annotations
    "S",    # flake8-bandit
    "BLE",  # flake8-blind-except
    "FBT",  # flake8-boolean-trap
    "B",    # flake8-bugbear
    "A",    # flake8-builtins
    "COM",  # flake8-commas
    "C4",   # flake8-comprehensions
    "DTZ",  # flake8-datetimez
    "T10",  # flake8-debugger
    "EM",   # flake8-errmsg
    "FA",   # flake8-future-annotations
    "ISC",  # flake8-implicit-str-concat
    "ICN",  # flake8-import-conventions
    "G",    # flake8-logging-format
    "INP",  # flake8-no-pep420
    "PIE",  # flake8-pie
    "T20",  # flake8-print
    "PYI",  # flake8-pyi
    "PT",   # flake8-pytest-style
    "Q",    # flake8-quotes
    "RSE",  # flake8-raise
    "RET",  # flake8-return
    "SLF",  # flake8-self
    "SLOT", # flake8-slots
    "SIM",  # flake8-simplify
    "TID",  # flake8-tidy-imports
    # "TCH",  # flake8-type-checking - disabled for now due to runtime import complexity
    "INT",  # flake8-gettext
    "ARG",  # flake8-unused-arguments
    "PTH",  # flake8-use-pathlib
    "ERA",  # eradicate
    "PD",   # pandas-vet
    "PGH",  # pygrep-hooks
    "PL",   # pylint
    "TRY",  # tryceratops
    "FLY",  # flynt
    "NPY",  # NumPy-specific rules
    "AIR",  # Airflow
    "PERF", # perflint
    "FURB", # refurb
    "LOG",  # flake8-logging
    "RUF",  # Ruff-specific rules
]

# Ignore specific rules that are too strict for our use case
ignore = [
    "D100", # Missing docstring in public module
    "D101", # Missing docstring in public class
    "D102", # Missing docstring in public method
    "D103", # Missing docstring in public function
    "D104", # Missing docstring in public package
    "D105", # Missing docstring in magic method
    "D106", # Missing docstring in public nested class
    "D107", # Missing docstring in __init__

    "COM812", # Trailing comma missing (conflicts with formatter)
    "COM819", # Trailing comma prohibited (conflicts with formatter)
    "E501",   # Line too long (handled by formatter)
    "ISC001", # Implicit string concatenation (conflicts with formatter)
    "Q000",   # Bad quotes (conflicts with formatter)
    "Q001",   # Bad quotes (conflicts with formatter)
    "Q002",   # Bad quotes (conflicts with formatter)
    "Q003",   # Bad quotes (conflicts with formatter)
    "W191",   # Indentation contains tabs (handled by formatter)
    
    # Try/except style preferences - these are opinionated
    "TRY300", # Consider moving to else block (valid pattern in many cases)
    "TRY301", # Abstract raise to inner function (not always clearer)
    "TRY401", # Redundant exception in logging (explicit is fine)
    
    # Method design preferences
    "PLR6301", # Could be static method (not always better)
    
    # Argument usage
    "ARG002", # Unused method argument (often required by interfaces)
    "ARG004", # Unused static method argument
    
    # Type annotations
    "ANN401", # Any type (sometimes necessary for flexibility)
    
    # Complexity metrics that are guidelines, not rules
    "PLR0911", # Too many return statements
    "PLR0912", # Too many branches
    "PLR0913", # Too many arguments
    "PLR0914", # Too many local variables
    "PLR0915", # Too many statements
    "PLR0917", # Too many positional arguments
]

# Allow autofix for most rules
fixable = ["ALL"]

# Disable autofix for some rules that need manual review
unfixable = [
    "F401",   # Unused imports (might be used in __all__)
    "F841",   # Unused variables (might be intentional)
    "ERA001", # Commented-out code (needs manual review)
]

# Per-file ignores for specific patterns
[lint.per-file-ignores]
"tests/**/*.py" = [
    "S101",    # Use of assert detected (OK in tests)
    "PLR2004", # Magic value used in comparison
    "ANN201",  # Missing return type annotation for public function
    "D103",    # Missing docstring in public function (OK in tests)
    "SLF001",  # Private member accessed (OK in tests)
]
"docs/**/*.py" = [
    "D100",   # Missing docstring in public module
    "INP001", # File is part of an implicit namespace package
]
"scripts/**/*.py" = [
    "T201", # print() found (OK in scripts)
    "D100", # Missing docstring in public module
]
"src/clarity/core/decorators.py" = [
    "ANN401", # Any type annotations are necessary in generic decorators
]
"src/clarity/storage/mock_repository.py" = [
    "PLR6301", # Interface methods cannot be static
]
# FastAPI uses Depends() and File() in function defaults as part of its dependency injection pattern
"src/clarity/api/**/*.py" = [
    "B008", # Do not perform function call in argument defaults (FastAPI pattern)
]
"src/clarity/auth/dependencies.py" = [
    "B008", # Do not perform function call in argument defaults (FastAPI pattern)
]
"src/clarity/main.py" = [
    "B008", # Do not perform function call in argument defaults (FastAPI pattern)
]

# Import sorting configuration
[lint.isort]
known-first-party = ["clarity"]
force-single-line = false
force-sort-within-sections = true
single-line-exclusions = ["typing"]

# pydocstyle configuration
[lint.pydocstyle]
convention = "google"

# flake8-tidy-imports configuration
[lint.flake8-tidy-imports]
ban-relative-imports = "all"

# flake8-type-checking configuration
[lint.flake8-type-checking]
strict = true
runtime-evaluated-base-classes = ["pydantic.BaseModel", "pydantic.BaseSettings", "fastapi.Request", "fastapi.WebSocket"]
runtime-evaluated-decorators = ["pydantic.validate_call", "pydantic.field_validator", "pydantic.model_validator", "fastapi.Depends", "fastapi.Query"]
exempt-modules = ["typing", "typing_extensions", "fastapi", "pydantic"]

# McCabe complexity
[lint.mccabe]
max-complexity = 10

# Pylint configuration
[lint.pylint]
max-args = 7
max-branches = 12
max-returns = 6
max-statements = 50

# Formatter configuration
[format]
quote-style = "double"
indent-style = "space"
line-ending = "auto"
