#!/bin/bash

# CLARITY V2 Pre-commit Hook
# Ensures code quality and TDD compliance before commits

set -e

echo "üîç Running pre-commit checks..."

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Check if we're in the right directory
if [ ! -f "clarity-loop-frontend-v2.xcodeproj/project.pbxproj" ]; then
    echo -e "${RED}‚ùå Not in CLARITY V2 project root${NC}"
    exit 1
fi

# Run SwiftLint
echo "üìù Running SwiftLint..."
if command -v swiftlint &> /dev/null; then
    # Only lint staged Swift files
    SWIFT_FILES=$(git diff --cached --name-only --diff-filter=ACM | grep -E '\.swift$' || true)
    
    if [ -n "$SWIFT_FILES" ]; then
        echo "$SWIFT_FILES" | xargs swiftlint lint --strict --quiet --reporter emoji
        if [ $? -ne 0 ]; then
            echo -e "${RED}‚ùå SwiftLint failed. Please fix errors before committing.${NC}"
            echo "Run 'swiftlint --fix' to auto-fix some issues"
            exit 1
        fi
        echo -e "${GREEN}‚úÖ SwiftLint passed${NC}"
    else
        echo "No Swift files to lint"
    fi
else
    echo -e "${YELLOW}‚ö†Ô∏è  SwiftLint not installed. Install with: brew install swiftlint${NC}"
fi

# Check for TDD compliance
echo "üß™ Checking TDD compliance..."
IMPL_FILES=$(git diff --cached --name-only --diff-filter=A | grep -E '^clarity-loop-frontend-v2/.*\.swift$' | grep -v 'Tests\.swift$' | grep -v '/Preview Content/' || true)
TEST_FILES=$(git diff --cached --name-only --diff-filter=ACM | grep -E 'Tests\.swift$' || true)

if [ -n "$IMPL_FILES" ]; then
    echo -e "${YELLOW}‚ö†Ô∏è  New implementation files detected:${NC}"
    echo "$IMPL_FILES"
    echo ""
    
    if [ -z "$TEST_FILES" ]; then
        echo -e "${RED}‚ùå TDD Violation: Adding implementation without tests!${NC}"
        echo "Remember: Write tests FIRST, then implementation."
        echo ""
        echo "To proceed anyway (NOT RECOMMENDED):"
        echo "  git commit --no-verify"
        exit 1
    else
        echo -e "${GREEN}‚úÖ Test files also being committed - good TDD practice!${NC}"
    fi
fi

# Check for TODO/FIXME in code
echo "üìã Checking for TODOs and FIXMEs..."
TODO_COUNT=$(git diff --cached --name-only --diff-filter=ACM | xargs grep -E "(TODO|FIXME)" 2>/dev/null | wc -l || echo "0")
if [ "$TODO_COUNT" -gt "0" ]; then
    echo -e "${YELLOW}‚ö†Ô∏è  Found $TODO_COUNT TODO/FIXME comments in staged files${NC}"
    git diff --cached --name-only --diff-filter=ACM | xargs grep -n -E "(TODO|FIXME)" || true
fi

# Check for debugging artifacts
echo "üêõ Checking for debug code..."
DEBUG_PATTERNS="NSLog|print\(|debugPrint|dump\(|\.debug"
DEBUG_COUNT=$(git diff --cached --name-only --diff-filter=ACM | grep -E '\.swift$' | xargs grep -E "$DEBUG_PATTERNS" 2>/dev/null | wc -l || echo "0")
if [ "$DEBUG_COUNT" -gt "0" ]; then
    echo -e "${YELLOW}‚ö†Ô∏è  Found debug code in staged files:${NC}"
    git diff --cached --name-only --diff-filter=ACM | grep -E '\.swift$' | xargs grep -n -E "$DEBUG_PATTERNS" || true
fi

# Check for merge conflict markers
echo "üîÄ Checking for merge conflicts..."
CONFLICT_COUNT=$(git diff --cached --name-only --diff-filter=ACM | xargs grep -E "^(<<<<<<<|=======|>>>>>>>)" 2>/dev/null | wc -l || echo "0")
if [ "$CONFLICT_COUNT" -gt "0" ]; then
    echo -e "${RED}‚ùå Found merge conflict markers!${NC}"
    exit 1
fi

# Success
echo ""
echo -e "${GREEN}‚úÖ All pre-commit checks passed!${NC}"
echo ""

# TDD reminder
if [ -n "$TEST_FILES" ]; then
    echo "üß™ Remember the TDD cycle:"
    echo "   1. Red: Write a failing test"
    echo "   2. Green: Write minimal code to pass"
    echo "   3. Refactor: Improve code quality"
fi

exit 0