import Foundation
import SwiftData

/// Represents a generated AI insight stored locally.
///
/// This model caches insights received from the Gemini service, allowing users
/// to view their insight history offline.
@Model
final class InsightEntity {
    /// The unique identifier for the insight, matching the backend ID.
    @Attribute(.unique) var id: String

    /// The ID of the user this insight belongs to.
    var userId: String

    /// The full, human-readable narrative generated by the AI.
    var narrative: String

    /// A list of key, salient bullet points from the insight.
    var keyInsights: [String]

    /// A list of actionable recommendations for the user.
    var recommendations: [String]

    /// The confidence score (0.0-1.0) from the AI model for this insight.
    var confidenceScore: Double

    /// The timestamp when the insight was generated on the backend.
    var generatedAt: Date

    /// A local-only timestamp to track when the user last viewed this insight.
    var lastViewedAt: Date?

    init(
        id: String,
        userId: String,
        narrative: String,
        keyInsights: [String],
        recommendations: [String],
        confidenceScore: Double,
        generatedAt: Date,
        lastViewedAt: Date? = nil
    ) {
        self.id = id
        self.userId = userId
        self.narrative = narrative
        self.keyInsights = keyInsights
        self.recommendations = recommendations
        self.confidenceScore = confidenceScore
        self.generatedAt = generatedAt
        self.lastViewedAt = lastViewedAt
    }

    /// A convenience initializer to create an `InsightEntity` from a `HealthInsightDTO`.
    convenience init(from dto: HealthInsightDTO) {
        self.init(
            id: dto.id,
            userId: dto.userId,
            narrative: dto.narrative,
            keyInsights: dto.keyInsights,
            recommendations: dto.recommendations,
            confidenceScore: dto.confidenceScore,
            generatedAt: dto.generatedAt
        )
    }
}
